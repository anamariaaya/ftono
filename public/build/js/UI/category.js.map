{"version":3,"sources":["UI/category.js"],"names":["categoryInput","gridCategory","readLang","readJSON","eliminarItem","normalizeText","async","consultaCategory","urlParams","URLSearchParams","window","location","search","id","get","category","url","origin","resultado","fetch","mostrarCategory","json","error","console","log","datos","lang","map","keyword","keyword_en","toLowerCase","keyword_es","sort","a","b","forEach","keywordLink","document","createElement","classList","add","href","keywordTitle","textContent","card","appendChild","filtraCategory","addEventListener","e","texto","target","value","querySelectorAll","indexOf","style","display","marginRight","columnGap"],"mappings":"OAASA,cAAeC,iBAAoB,yBACnCC,SAAUC,SAAUC,aAAcC,kBAAqB,8BAGzDC,eAAeC,mBAClB,IAEI,MAAMC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAChDC,EAAKL,EAAUM,IAAI,MACnBC,EAAWP,EAAUM,IAAI,QACzBE,EAAMN,OAAOC,SAASM,OAAO,2BAA2BJ,EAAG,SAASE,EACpEG,QAAkBC,MAAMH,GAE9BI,sBADoBF,EAAUG,QAGjC,MAAMC,GACHC,QAAQC,IAAIF,WAGbhB,eAAec,gBAAgBK,GAC9B,MAAMC,QAAaxB,iBACEC,YAErBsB,EAAQA,EAAME,IAAIC,IACP,CACHf,GAAIe,EAAQf,GACZgB,WAAYD,EAAQC,WAAWC,cAC/BC,WAAYH,EAAQG,WAAWD,kBAIjCE,KAAK,CAACC,EAAGC,IACC,OAATR,EACIO,EAAEF,WAAaG,EAAEH,YACR,EAETE,EAAEF,WAAaG,EAAEH,WACT,EAEJ,EAEJE,EAAEJ,WAAaK,EAAEL,YACR,EAETI,EAAEJ,WAAaK,EAAEL,WACT,EAEJ,GAIfJ,EAAMU,QAAQP,IACN,MAAMf,GAACA,EAAEgB,WAAEA,EAAUE,WAAEA,GAAcH,EAG/BQ,EAAcC,SAASC,cAAc,KAC3CF,EAAYG,UAAUC,IAAI,uBAC1BJ,EAAYK,KAAO,IAInB,MAAMC,EAAeL,SAASC,cAAc,KAC5CI,EAAaH,UAAUC,IAAI,uBAEnBE,EAAaC,YADV,MAARjB,EACgCK,EAEAF,EAKnC,MAAMe,EAAOP,SAASC,cAAc,OACpCM,EAAKL,UAAUC,IAAI,sBAAuB,eAG1CJ,EAAYS,YAAYH,GAExBE,EAAKC,YAAYT,GAEjBnC,aAAa4C,YAAYD,KAEjCE,iBAGR,SAASA,iBACD9C,cAAc+C,iBAAiB,QAASC,IAChC,MAAMC,EAAQ5C,cAAc2C,EAAEE,OAAOC,OACvBd,SAASe,iBAAiB,gBAElCjB,QAAQS,KAE8B,IADfvC,cAAcuC,EAAKD,aACxBU,QAAQJ,IAChBL,EAAKU,MAAMC,QAAU,OACrBX,EAAKU,MAAME,YAAc,OACzBvD,aAAaqD,MAAMG,UAAY,KAE/Bb,EAAKU,MAAMC,QAAU","file":"category.js","sourcesContent":["import { categoryInput, gridCategory } from './selectores.js';\r\nimport { readLang, readJSON, eliminarItem, normalizeText } from '../base/funciones.js';\r\n\r\n\r\nexport async function consultaCategory(){\r\n    try{\r\n        //get the id from the url\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const id = urlParams.get('id');\r\n        const category = urlParams.get('name');\r\n        const url = window.location.origin+'/api/public/category?id='+id+'&name='+category;\r\n        const resultado = await fetch(url);\r\n        const datos = await resultado.json();\r\n        mostrarCategory(datos);\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\nexport async function mostrarCategory(datos){\r\n        const lang = await readLang();\r\n        const alerts = await readJSON();\r\n\r\n        datos = datos.map(keyword => {\r\n            return {\r\n                id: keyword.id,\r\n                keyword_en: keyword.keyword_en.toLowerCase(),\r\n                keyword_es: keyword.keyword_es.toLowerCase()\r\n            }\r\n        });\r\n        //order the keywords by alphabetical order depending on the language\r\n        datos.sort((a, b) => {\r\n            if(lang === 'es'){\r\n                if(a.keyword_es < b.keyword_es){\r\n                    return -1;\r\n                }\r\n                if(a.keyword_es > b.keyword_es){\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }else{\r\n                if(a.keyword_en < b.keyword_en){\r\n                    return -1;\r\n                }\r\n                if(a.keyword_en > b.keyword_en){\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        datos.forEach(keyword => {\r\n                const {id, keyword_en, keyword_es} = keyword;\r\n\r\n                //generar el link para la keyword\r\n                const keywordLink = document.createElement('A');\r\n                keywordLink.classList.add('p-cards__grid__link');\r\n                keywordLink.href = '#';\r\n                \r\n\r\n                //generar la etiqueta para el tipo de usuario\r\n                const keywordTitle = document.createElement('P');\r\n                keywordTitle.classList.add('p-cards__grid__text');\r\n                if(lang == 'es'){\r\n                        keywordTitle.textContent = keyword_es;\r\n                }else{\r\n                        keywordTitle.textContent = keyword_en;\r\n                }\r\n                \r\n\r\n                //Generar el contenedor de la información del usuario\r\n                const card = document.createElement('DIV');\r\n                card.classList.add('p-cards__grid__item', 'card-public');\r\n\r\n                //agregar la información al contenedor\r\n                keywordLink.appendChild(keywordTitle);\r\n                //agregar el link contenedor a la tarjeta\r\n                card.appendChild(keywordLink);\r\n                //agregar el contenedor de la información al grid\r\n                gridCategory.appendChild(card);\r\n        });\r\n        filtraCategory();\r\n}\r\n\r\nfunction filtraCategory(){\r\n        categoryInput.addEventListener('input', e => {\r\n                const texto = normalizeText(e.target.value);\r\n                const cards = document.querySelectorAll('.card-public');\r\n\r\n                cards.forEach(card => {\r\n                        const keywordTitle = normalizeText(card.textContent);\r\n                        if(keywordTitle.indexOf(texto) !== -1){\r\n                                card.style.display = 'flex';\r\n                                card.style.marginRight = '2rem';\r\n                                gridCategory.style.columnGap = '0';\r\n                        }else{\r\n                                card.style.display = 'none';\r\n                        }\r\n                });\r\n        }); \r\n}"]}